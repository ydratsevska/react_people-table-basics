{"version":3,"sources":["App.tsx","PagesComponents/HomePage.tsx","components/Loader/Loader.tsx","api.ts","utils/Constans.tsx","PagesComponents/PersonLink.tsx","PagesComponents/PeoplePageContent.tsx","PagesComponents/NotFoundPage.tsx","Root.tsx","index.tsx"],"names":["getLinkClass","isActive","classNames","App","className","role","to","HomePage","Loader","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","columnsNames","PersonLink","person","selectedPersonSlug","slug","sex","name","born","died","motherName","fatherName","mother","father","isSelectedPerson","href","PeoplePage","useState","isLoading","setIsLoading","isError","setIsError","people","setPeople","useParams","useEffect","catch","finally","peopleWithParents","map","find","length","columnName","NotFoundPage","Root","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.a2042101.chunk.js","sourcesContent":["import {\n  NavLink, Outlet,\n} from 'react-router-dom';\n\nimport './App.scss';\nimport classNames from 'classnames';\n\nconst getLinkClass = ({ isActive }: { isActive: boolean }) => classNames(\n  'navbar-item',\n  { 'has-background-grey-lighter': isActive },\n);\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <nav\n        data-cy=\"nav\"\n        className=\"navbar is-fixed-top has-shadow\"\n        role=\"navigation\"\n        aria-label=\"main navigation\"\n      >\n        <div className=\"container\">\n          <div className=\"navbar-brand\">\n            <NavLink className={getLinkClass} to=\"/\">\n              Home\n            </NavLink>\n\n            <NavLink\n              className={getLinkClass}\n              to=\"/people\"\n            >\n              People\n            </NavLink>\n          </div>\n        </div>\n      </nav>\n\n      <main className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </main>\n    </div>\n  );\n};\n","export const HomePage = () => {\n  return (\n    <h1 className=\"title\">Home Page</h1>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","export const columnsNames = ['Name', 'Sex', 'Born', 'Died', 'Mother', 'Father'];\n\nexport const NOT_SET_VALUE = '-';\n\nexport const FAMEL_GENDER = 'f';\nexport const MALE_GENDER = 'm';\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Person } from '../types';\nimport { NOT_SET_VALUE, FAMEL_GENDER } from '../utils/Constans';\n\ntype Props = {\n  person: Person;\n  selectedPersonSlug: string | undefined;\n};\n\nexport const PersonLink: React.FC<Props> = ({ person, selectedPersonSlug }) => {\n  const {\n    slug,\n    sex,\n    name,\n    born,\n    died,\n    motherName,\n    fatherName,\n    mother,\n    father,\n  } = person;\n  const isSelectedPerson = selectedPersonSlug === slug;\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={classNames(\n        { 'has-background-warning': isSelectedPerson },\n      )}\n    >\n      <td>\n        <a\n          className={classNames(\n            { 'has-text-danger': sex === FAMEL_GENDER },\n          )}\n          href={`/#people/${slug}`}\n        >\n          {name}\n        </a>\n      </td>\n\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n\n      <td>\n        {mother ? (\n          <a\n            className=\"has-text-danger\"\n            href={`/#people/${mother.slug}`}\n          >\n            {motherName}\n          </a>\n        ) : (\n          motherName || NOT_SET_VALUE\n        )}\n      </td>\n\n      <td>\n        {father ? (\n          <a\n            href={`/#people/${father.slug}`}\n          >\n            {fatherName}\n          </a>\n        ) : (\n          fatherName || NOT_SET_VALUE\n        )}\n      </td>\n    </tr>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { Loader } from '../components/Loader';\nimport { getPeople } from '../api';\nimport { PersonLink } from './PersonLink';\nimport { Person } from '../types';\nimport { columnsNames } from '../utils/Constans';\n\nexport const PeoplePage: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [people, setPeople] = useState<Person[]>([]);\n\n  const { slug } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getPeople()\n      .then(setPeople)\n      .catch(() => setIsError(true))\n      .finally(() => (\n        setIsLoading(false)\n      ));\n  }, []);\n\n  const peopleWithParents = people.map(person => {\n    const mother = people.find(({ name }) => name === person.motherName);\n    const father = people.find(({ name }) => name === person.fatherName);\n\n    return { ...person, mother, father };\n  });\n\n  if (isError) {\n    return (\n      <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n        Something went wrong\n      </p>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <Loader />\n    );\n  }\n\n  if (!people.length) {\n    return (\n      <p data-cy=\"noPeopleMessage\">\n        There are no people on the server\n      </p>\n    );\n  }\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"box table-container\">\n          <table\n            data-cy=\"peopleTable\"\n            className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n          >\n            <thead>\n              <tr>\n                {columnsNames.map(columnName => <th>{columnName}</th>)}\n              </tr>\n            </thead>\n\n            <tbody>\n              {peopleWithParents.map(person => (\n                <PersonLink\n                  person={person}\n                  selectedPersonSlug={slug}\n                  key={person.slug}\n                />\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </>\n  );\n};\n","export const NotFoundPage = () => {\n  return (\n    <h1 className=\"title\">Page not found</h1>\n  );\n};\n","import {\n  HashRouter as Router,\n  Routes,\n  Route,\n  Navigate,\n} from 'react-router-dom';\nimport { App } from './App';\nimport { HomePage } from './PagesComponents/HomePage';\nimport { PeoplePage } from './PagesComponents/PeoplePageContent';\nimport { NotFoundPage } from './PagesComponents/NotFoundPage';\n\nexport const Root = () => (\n  <Router>\n    <Routes>\n      <Route path=\"/\" element={<App />}>\n        <Route index element={<HomePage />} />\n        <Route path=\"people/:slug?\" element={<PeoplePage />} />\n        <Route path=\"*\" element={<NotFoundPage />} />\n        <Route\n          path=\"/home\"\n          element={\n            <Navigate to=\"/\" replace />\n          }\n        />\n      </Route>\n    </Routes>\n  </Router>\n);\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Root } from './Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(<Root />);\n"],"sourceRoot":""}